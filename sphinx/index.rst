.. highlight:: rst


OpenOA Operational Analysis Framework
#####################################

|Binder Badge| |Gitter Badge| |Journal of Open Source Software Badge| |Documentation Badge| |Tests Badge| |Code Coverage Badge| |pre-commit| |Code style: black| |Imports: isort|

.. ::

    # with overline, for parts
    * with overline, for chapters
    =, for sections
    -, for subsections
    ^, for subsubsections
    ", for paragraphs

Overview
********

This library provides a framework for working with timeseries data from wind plants. Its development
has been motivated by the Wind Plant Performance Prediction (WP3) Benchmarking (PRUF) project, which
aims to provide a reference implementaiton for plant-level performance assessment.

The primary entry point for analyzing data is the `PlantData` class, which is based on Pandas data
frames and attrs data classes to efficiently process, store, and validate user data. In conjunction
with the `PlantMetaData` class, standardized routines can be created to bring in raw data from wind
turbines, meteorological (met) towers, revenue meters, and reanalysis products, such as MERRA-2 or
ERA5. Additionally, if defined, the `PlantData` can validate data for what's expected at run time
for any of the OpenOA analysis classes, as defined below.

Analysis routines are provided in analysis classes, which each use the PlantData objects to ingest
data. For complete documentation please see the `analysis API page <api/analysis.html>`_. OpenOA
includes the following analysis classes:

* ``MonteCarloAEP``: This routine estimates the long-term annual energy production (AEP) of a wind
  power plant (typically over 10-20 years) based on operational data from a shorter period of
  record (e.g., 1-3 years), along with the uncertainty.
* ``TurbineLongTermGrossEnergy``: This routine estimates the long-term turbine ideal energy (TIE) of
  a wind plant, defined as the long-term AEP that would be generated by the wind plant if all
  turbines operated normally (i.e., no downtime, derating, or severe underperformance, but still
  subject to wake losses and moderate performance losses), along with the uncertainty.
* ``ElectricalLosses``: The ElectricalLosses routine estimates the average electrical losses at a
  wind plant, along with the uncertainty, by comparing the energy produced at the wind turbines to
  the energy delivered to the grid.
* ``EYAGapAnalysis``: This class is used to perform a gap analysis between the estimated AEP from a
  pre-construction energy yield estimate (EYA) and the actual AEP. The gap analysis compares
  different wind plant performance categories to help understand the sources of differences between
  EYA AEP estimates and actual AEP, specifically availability losses, electrical losses, and TIE.
* ``WakeLosses``: This routine estimates long-term internal wake losses experienced by a wind plant
  and for each individual turbine, along with the uncertainty.
* ``StaticYawMisalignment``: The StaticYawMisalignment routine estimates the static yaw misalignment
  for individual wind turbines as a function of wind speed by comparing the estimated wind vane
  angle at which power is maximized to the mean wind vane angle at which the turbines operate.
  The routine includes uncertainty quantification. **Warning: This method has not been validated
  using data from wind turbines with known static yaw misalignments and the results should be
  treated with caution.**

Lower-level "toolkit" modules are provided in the utils subpackage. These methods are used
throughout the analysis classes. They can also be used individually to support general wind plant
data analysis activities. For complete documentation please see the `utils API page <api/utils.html>`_.
Some examples of utils modules include:

* **Quality Assurance**: This module provides quality assurance methods for identifying potential
  quality issues with SCADA data prior to importing it into a `PlantData` object.
* **Filters**: This module provides functions for flagging operational data based on a range of
  criteria (e.g., outlier detection).
* **Power Curve**: The power curve module contains methods for fitting power curve models to SCADA data.
* **Imputing**: This module provides methods for filling in missing data with imputed values.
* **Met Data Processing**: This module contains methods for processing meteorological data, such as
  computing air density and wind shear coefficients.
* **Plotting**: This module contains convenient functions for creating plots, such as power curve
  plots and maps showing the wind plant layout.

To interact with how each of these components of OpenOA are used, please visit our examples notebooks on
`Binder <https://mybinder.org/v2/gh/NREL/OpenOA/develop_v3?filepath=examples>`_, or view them statically on the
`examples page <examples/index.html>`_.

If you use this software in your work, please cite our JOSS article with the following BibTex::

   @article{Perr-Sauer2021,
      doi = {10.21105/joss.02171},
      url = {https://doi.org/10.21105/joss.02171},
      year = {2021},
      publisher = {The Open Journal},
      volume = {6},
      number = {58},
      pages = {2171},
      author = {Jordan Perr-Sauer and Mike Optis and Jason M. Fields and Nicola Bodini and Joseph C.Y. Lee and Austin Todd and Eric Simley and Robert Hammond and Caleb Phillips and Monte Lunacek and Travis Kemper and Lindy Williams and Anna Craig and Nathan Agarwal and Shawn Sheng and John Meissner},
      title = {OpenOA: An Open-Source Codebase For Operational Analysis of Wind Farms},
      journal = {Journal of Open Source Software}
   }

More information about the analysis methods in OpenOA and their use in the WP3 Benchmarking project can be found in the
following publications. A summary of the OpenOA software is published in :cite:`ind-PerrSauer_JOSS_2021`. An overview
of the WP3 Benchmarking project showing a comparison between pre-construction AEP estimates and operational AEP for 10
commercial wind plants, estimated using the MonteCarloAEP method in OpenOA, is provided in
:cite:`ind-Fields_NREL_2021`. Benefits of the augmented AEP assessment features in the MonteCarloAEP method (e.g.,
machine learning, multivariate regression) are discussed in :cite:`ind-Bodini_WE_2021`. A partial gap analysis between
pre-construction AEP estimates and operational AEP, using the MonteCarloAEP, TurbineLongTermGrossEnergy, and
ElectricalLosses methods in OpenOA, is presented in :cite:`ind-Todd_WE_2022`.

References:
    .. bibliography:: refs.bib
        :style: unsrt
        :filter: docname in docnames
        :keyprefix: ind-

Table of Contents
*****************

.. toctree::
   :maxdepth: 2

   getting_started/index
   examples/index
   api/index
   credit


.. |Binder Badge| image:: https://mybinder.org/badge_logo.svg
   :target: https://mybinder.org/v2/gh/NREL/OpenOA/develop_v3?filepath=examples
.. |Gitter Badge| image:: https://badges.gitter.im/NREL_OpenOA/community.svg
   :target: https://gitter.im/NREL_OpenOA/community?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge
.. |Journal of Open Source Software Badge| image:: https://joss.theoj.org/papers/d635ef3c3784d49f6e81e07a0b35ff6b/status.svg
   :target: https://joss.theoj.org/papers/d635ef3c3784d49f6e81e07a0b35ff6b
.. |Documentation Badge| image:: https://readthedocs.org/projects/openoa/badge/?version=latest
   :target: https://openoa.readthedocs.io
.. |Tests Badge| image:: https://github.com/NREL/OpenOA/workflows/Tests/badge.svg?branch=develop
.. |Code Coverage Badge| image:: https://codecov.io/gh/NREL/OpenOA/branch/develop/graph/badge.svg
   :target: https://codecov.io/gh/NREL/OpenOA
.. |pre-commit| image:: https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&logoColor=white
   :target: https://github.com/pre-commit/pre-commit
.. |Code style: black| image:: https://img.shields.io/badge/code%20style-black-000000.svg
   :target: https://github.com/psf/black
.. |Imports: isort| image:: https://img.shields.io/badge/%20imports-isort-%231674b1?style=flat&labelColor=ef8336
   :target: https://pycqa.github.io/isort/
